## ATENCAO
## Quando for usar a CLI, criar um arquivo chamado liquibase.properties
## E alterar as informacoes de acordo com banco de dados desejado, a CLI vai usar este arquivo como base de configuracao para a execucao dos comandos
## Exemplos de comandos:
###                      liquibase update
###                      liquibase rollback-count 1



####     _     _             _ _
##      | |   (_)           (_) |
##      | |    _  __ _ _   _ _| |__   __ _ ___  ___
##      | |   | |/ _` | | | | | '_ \ / _` / __|/ _ \
##      | |___| | (_| | |_| | | |_) | (_| \__ \  __/
##      \_____/_|\__, |\__,_|_|_.__/ \__,_|___/\___|
##                  | |
##                  |_|
##
##      The liquibase.properties file stores properties which do not change often,
##      such as database connection information. Properties stored here save time
##      and reduce risk of mistyped command line arguments.
##      Learn more: https://docs.liquibase.com/concepts/connections/creating-config-properties.html
####
####
##   Note about relative and absolute paths:
##      The liquibase.properties file requires paths for some properties.
##      The classpath is the path/to/resources (ex. src/main/resources).
##      The changeLogFile path is relative to the classpath.
##      The url H2 example below is relative to 'pwd' resource.
####

classpath=src/main/resources
changeLogFile=db/changelog/db.changelog-master.yaml
contexts=dev
liquibase.command.url=jdbc:postgresql://localhost:5432/kanban_db
liquibase.command.username=liquibase
liquibase.command.password=123
liquibase.hub.mode=off

#   OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL
logLevel=INFO
